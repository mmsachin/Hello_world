https://www.andrewnoske.com/professional/index.php  --> create a site similar to this one for resume
Use resumes in this site for reference



Achievements


Successfully took on Software Engineering responsibilities, leading and contributing to the following key projects:
Text2SQL System with Prompt Engineering
Led the design and implementation of a novel text-to-SQL system leveraging prompt engineering and the OneTwo framework, enabling users to query databases using natural language.
Authored a comprehensive design document focusing on modularity, testability, resilience (e.g., handling large result sets, database errors), and maintainability.
Developed well-factored and testable code for SQL query generation, execution, and result summarization.
Engineered a significant architectural migration from OneTwo F1 Query Engine to direct F1 usage, ensuring system adaptability and maintaining core functionality.

Finance Chatbot Guardrail Module
Designed and implemented a guardrail module to enhance chatbot reliability by providing informative natural language responses when the LLM generated invalid SQL.
Evaluated multiple solutions, selecting a post-NL2SQL validation approach to effectively handle ambiguous queries and provide clear user feedback.
Leveraged contextual schema and product limitation information to generate helpful explanations, logging responses for continuous monitoring and system improvement.

LLM API Prober (F1 Query Service)
Authored and deployed a new boq node, F1QueryProber, to ensure the reliability and stability of the critical F1 Query Service LLM API.
Implemented three distinct probes to comprehensively test SQL response, guardrail response, and SQL recovery features.
Integrated probers into the autopush pipeline for continuous validation across staging, preprod, and production environments.

LLM API SQL Recovery Enhancement (TenX Chatbot)
Designed and implemented a feature to automatically recover failed SQL queries generated by the LLM, significantly improving query success rates (addressing ~7% failure rate).
Managed the feature lifecycle using a feature flag (ENABLE_SQL_RECOVERY), from initial testing to full rollout.
Engineered the system to provide the LLM with the original query and error message for correction, with safeguards against infinite loops and logic to clean extraneous characters from LLM output.

Feature Flag System Implementation (Mendel for TenX Chatbot)
Implemented a robust feature flag system using Mendel ( go/mendel ) for the TenX chatbot, enabling controlled feature rollouts and A/B testing.
Created Mendel configurations, integrated the Mendel runtime into the chatbot binary, and embedded feature flag checks within the codebase.
Refactored the F1QueryService to accept a new F1QueryChainParameters object, facilitating flag-controlled features like session context.

Admin UI Test Suite Enhancements (Golden Queries)
Significantly improved the usability and efficiency of the Admin UI's Golden Queries interface by developing and implementing UI test enhancements.
Implemented UI tests for "Add to Test Set" (single and multi-select) functionalities and enhanced error reporting by displaying specific SQL causing failures during test case operations, reducing debugging time.


Hackathon Project
Accelerating Application Development with AI 
. Planning & Requirements (Time reduced: ~40%) 📝
🎨 AI-generated logo & branding
Generated brand-aligned logo in minutes
📄 AI-powered requirements documentation
Automated generation of comprehensive requirements documents
AI-validated requirements for completeness and consistency
⭐ Outcome: Requirements finalization and branding can be completed ~40% faster

2. Design (Time reduced: ~50%) 🎯
🗃️ Automated database schema design
AI analysis of requirements to generate optimized database schema
Intelligent data relationship mapping and indexing recommendations
📱 Rapid UI/UX design
AI-generated screen mockups based on requirements guidelines
Interactive prototype creation within minutes
📊 Sample content generation
AI creation of placeholder and sample content for testing
Realistic data generation aligned with business needs
⭐ Outcome: Design phase with complete screens and sample content can be done 50% faster

3. Development (Time reduced: ~60%) 💻
👨‍💻 AI-assisted coding
Code generation for 90% of standard functionality
Real-time code optimization and refactoring suggestions
🔍 Error handling & monitoring framework
AI-generated comprehensive error handling strategies
♻️ Intelligent component reuse
Automated identification of reusable components from existing codebase
Adaptation of components to current requirements
⭐ Outcome: Core application with robust error handling is expected to be completed 60% faster

4. Testing (Time reduced: ~45%) 🧪
📋 Automated test case generation
AI creation of comprehensive test cases covering all functional requirements
Generation of sample test data that mirrors production scenarios
🔄 Observations:
Positive and Negative test cases covered
Performance test cases covered on further prompts
UI Testing: Separate test cases for UI testing (e.g., usability, responsiveness, accessibility) needed
Security Testing: Security test cases to verify authentication, authorization, and data protection mechanisms needed
⭐ Outcome: Test coverage with robust test data achieved 40% faster. Non functional test cases needed more attention

5. Deployment & Maintenance (Time reduced: ~30%) 🚀
🔄 Streamlined cut-over activities
AI-generated detailed cut-over plan to assist with environment validation and configuration
👨‍🏫 Comprehensive user training
AI-generated personalized training materials and documentation tailored to different user roles
Knowledge base creation with predictive user questions
📊 User satisfaction measurement
AI-designed user satisfaction surveys with smart analytics
Sentiment analysis of user feedback for continuous improvement
Predictive analysis of potential user adoption challenges
⭐ Outcome: Deployment and initial user satisfaction feedback to be 30% faster

Awards for Hackathon: Best in Design and Best in Branding




Key Skills
Quickly able to understand complex or ambiguous projects and contribute solutions.
Experience problem solving and debugging skills.
Experience designing object oriented software for testability.
Technical Skills
Google Readability: Python, ABAP, API (One Platform)
Programming Languages: JavaScript, Python, SQL, ABAP, Angular
Testing & QA: Software Testing (Unit, Integration, UI, API), Test Automation, Debugging, CI/CD, Prober Development, Reliability Engineering
Methodologies & Concepts: Agile Development, Error Handling & Resilience, Modularity & Extensibility, Feature Flag Management, A/B Testing, Code Comprehension, Technical Design Documentation

Google spot bonus
N3Q Superstar! - We want to thank all of you for continuing to deliver high-quality work and going the extra mile to support each other on such a large, complex transformation.
Anaplan Plug & Plan
Thank you for landing the Anaplan Plug & Plan for P&E and other PAs for 2022 planning. The effort is a critical step forward for the transparent and scalable solution enabling future x-PA collaboration.
Congratulations for landing an exemplary, flawlessly-executed project! Thank you!

For jumping in to solve problems!

Thank you for participating in the AO SWAT team. Your contribution has enabled AO to be used by Finance users and reduced the issues by over 60%.

Google's first SAP DIRT

Thank you and appreciate all the thoughtful planning, hard work to help realize the first SAP Disaster Recovery

PMT- SAP PS (Capex) integration (AR Automation) Contribution

Thanks for going above and beyond in your support of the MARCUS AR Automation Feature in PMT. This feature dramatically improves our funding process and eliminates manual entry. Your support and contribution has a direct impact to critical business objectives of simplicity and efficiency. GREAT WORK!!                                   

Project System Contributions

Thanks Sachin, for all your contributions on the Project
Systems deliverables, and executing for our partners in DC and REWS.

Thank you Sachin for teaming up with Kalyan in bringing down SAP bpc forecast archive timing from 12.5 hours to 1 hour.

This goes a long way in improving the data availability for all downstream systems.



Key skilss for reference:

Key Skills
Excellent writing and documentation skills, including a strong desire to add code comments or document anything lacking documentation.

Have created >400 pages on my public wiki - with >5000 unique visitors per month.

Have created >250 pages on this internal Google wiki - with >1600 unique visitors (Googlers) per month.

Have created >100 pages and setup our GPS team g3doc site, including g3doc help slides.

Strong presentation skills, able to engage and communicate well to a crowd at any level (from engineers all the way down to children).

Very organized and methodical in everything I do.

Very fast at the creating of user interfaces, mock-up designs and 3D animation.

Able to understand large projects and how the pieces fit together.

Technical Skills
Google Readability (3): C++, JavaScript, Python (go/changestats/anoske)

Google Technologies:

Storage: Bigtable, Spanner, Dremel, Placer, etc.

Jobs: HTTPServer, Stubby2, Flume, Borg, Borgmon, Flume, MapReduce, Scaffolding.

Monitoring: Monarch/PCON, Wipeout, Mendel Experiments, Lavine (load testing).

Crowd Sourcing: Furball, Crowd Compute, Google Consumer Surveys

Other: App Engine, Plx Dashboards, Colab, GAIA, G3doc, PubSub, Rosie, Google Data Studio, Logs^.

Programming Languages: C++, JavaScript, Python, C#, Java, SQL/GoogleSQL, Go^.

Operating Systems: Linux (Ubuntu), OS X, Windows.

Web Technologies: CSS, HTML, PHP, JSP, Flash, ActionScript.

Application Technologies: Unity, Qt toolkit, Closure, Soy, Mono.
