GCP Project ID: 

Git hub repo: 


Step 1: Open Cloud Shell 

Step 2: Clone the git hub repo

# Clone the repository 
git clone https://github.com/srivats09-git/budget-management-system.git

Step 3: Update terraform.tfvars

cd budget-management-system/budget-management/terraform

nano terraform.tfvar

Update with Project ID with your gcp project and set password

project_id = "alert-synapse-450214-e2"
region     = "us-west2"
db_password = "BudgetApp02092025"


Step 4: Update main.tf to replace cloudsql.googleapis.com with sqladmin.googleapis.com

nano main. 

Step 5: Create deployment script

Make sure you are in budget-management-system folder

First, create a new directory for deployment scripts
mkdir -p deployment-scripts
cd deployment-scripts

Create deploy.sh

touch deploy.sh

nano deploy.sh

#!/bin/bash

set -e

# Configuration
PROJECT_ID="alert-synapse-450214-e2"
REGION="us-west2"
APP_NAME="budget-app"
REPO_URL="https://github.com/srivats09-git/budget-management-system.git"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_requirements() {
    log_info "Checking requirements..."
    
    # Check for required tools
    command -v gcloud >/dev/null 2>&1 || { log_error "gcloud is required but not installed. Aborting."; exit 1; }
    command -v terraform >/dev/null 2>&1 || { log_error "terraform is required but not installed. Aborting."; exit 1; }
    command -v git >/dev/null 2>&1 || { log_error "git is required but not installed. Aborting."; exit 1; }
    command -v psql >/dev/null 2>&1 || { log_error "psql is required but not installed. Aborting."; exit 1; }
}

setup_gcp() {
    log_info "Setting up GCP project..."
    
    # Configure gcloud
    gcloud config set project $PROJECT_ID
    
    # Enable required APIs
    gcloud services enable cloudsql.googleapis.com \
        run.googleapis.com \
        secretmanager.googleapis.com \
        cloudresourcemanager.googleapis.com \
        cloudbuild.googleapis.com
}

clone_repository() {
    log_info "Cloning repository..."
    
    if [ -d "budget-management-system" ]; then
        log_warn "Repository directory already exists. Removing..."
        rm -rf budget-management-system
    fi
    
    git clone $REPO_URL
    cd budget-management-system
}

setup_terraform() {
    log_info "Setting up Terraform..."
    
    cd budget-management/terraform
    
    # Generate random password for database
    DB_PASSWORD=$(openssl rand -base64 32)
    
    # Create terraform.tfvars
    cat > terraform.tfvars << EOF
project_id = "${PROJECT_ID}"
region     = "${REGION}"
db_password = "${DB_PASSWORD}"
EOF
    
    # Initialize and apply Terraform
    terraform init
    terraform apply -auto-approve
    
    # Save outputs
    DB_INSTANCE=$(terraform output -raw db_instance_name)
    CLOUD_RUN_URL=$(terraform output -raw cloud_run_url)
    
    # Save variables for later use
    cd ../..
    echo "DB_PASSWORD=${DB_PASSWORD}" > .env
    echo "DB_INSTANCE=${DB_INSTANCE}" >> .env
    echo "CLOUD_RUN_URL=${CLOUD_RUN_URL}" >> .env
}

build_and_deploy_app() {
    log_info "Building and deploying application..."
    
    # Create Dockerfile if it doesn't exist
    if [ ! -f "Dockerfile" ]; then
        cat > Dockerfile << EOF
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .

ENV PYTHONPATH=/app

CMD exec gunicorn --bind :8080 --workers 1 --threads 8 --timeout 0 app.main:app
EOF
    fi
    
    # Build and push container
    gcloud builds submit --tag gcr.io/${PROJECT_ID}/${APP_NAME}:latest
    
    # Deploy to Cloud Run
    gcloud run deploy ${APP_NAME} \
        --image gcr.io/${PROJECT_ID}/${APP_NAME}:latest \
        --platform managed \
        --region ${REGION} \
        --allow-unauthenticated \
        --set-env-vars="DB_USER=budget_app,DB_NAME=budget_management" \
        --add-cloudsql-instances ${PROJECT_ID}:${REGION}:${DB_INSTANCE}
}

setup_database() {
    log_info "Setting up database..."
    
    # Source environment variables
    source .env
    
    # Download and setup Cloud SQL Proxy
    if [ ! -f "cloud_sql_proxy" ]; then
        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
        chmod +x cloud_sql_proxy
    fi
    
    # Run Cloud SQL Proxy
    ./cloud_sql_proxy -instances=${PROJECT_ID}:${REGION}:${DB_INSTANCE}=tcp:5432 &
    PROXY_PID=$!
    
    # Wait for proxy to be ready
    sleep 10
    
    # Initialize database
    PGPASSWORD=${DB_PASSWORD} psql -h localhost -U budget_app -d budget_management -f budget-management/scripts/setup.sh
    
    # Kill proxy
    kill $PROXY_PID
}

cleanup() {
    log_info "Cleaning up..."
    
    # Remove sensitive files
    rm -f .env
    rm -f cloud_sql_proxy
}

main() {
    log_info "Starting deployment..."
    
    check_requirements
    setup_gcp
    clone_repository
    setup_terraform
    build_and_deploy_app
    setup_database
    cleanup
    
    log_info "Deployment completed successfully!"
    log_info "Application URL: $(grep CLOUD_RUN_URL .env | cut -d '=' -f2)"
}

# Run main function
main

CTRL + X , y, enter

Create cleanup.sh (optional)

Create a cleanup script for when you need to tear everything down:

touch cleanup.sh

nano cleanup.sh

#!/bin/bash

set -e

# Configuration
PROJECT_ID="alert-synapse-450214-e2"
REGION="us-west2"
APP_NAME="budget-app"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

# Confirm destruction
read -p "This will destroy all resources. Are you sure? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    exit 1
fi

log_info "Starting cleanup..."

# Delete Cloud Run service
log_info "Deleting Cloud Run service..."
gcloud run services delete ${APP_NAME} --platform managed --region ${REGION} --quiet || true

# Delete container images
log_info "Deleting container images..."
gcloud container images delete gcr.io/${PROJECT_ID}/${APP_NAME}:latest --quiet || true

# Destroy Terraform resources
if [ -d "budget-management-system/budget-management/terraform" ]; then
    log_info "Destroying Terraform resources..."
    cd budget-management-system/budget-management/terraform
    terraform destroy -auto-approve
    cd ../../..
fi

# Remove local files
log_info "Removing local files..."
rm -rf budget-management-system
rm -f cloud_sql_proxy
rm -f .env

log_info "Cleanup completed successfully!"

CTRL + X , y, enter

Make the scripts executable:

chmod +x deploy.sh
chmod +x cleanup.sh


Here's what we need to do:
Initial Setup:
```
# Install Google Cloud SDK if not already installed
# Visit https://cloud.google.com/sdk/docs/install for your OS-specific installation

# Initialize gcloud and set project
gcloud init
gcloud config set project alert-synapse-450214-e2

# Enable required APIs
gcloud services enable \
   run.googleapis.com \
  secretmanager.googleapis.com \
  cloudresourcemanager.googleapis.com
```

Create a Cloud SQL instance:

# Create PostgreSQL instance
gcloud sql instances create budget-db \
  --database-version=POSTGRES_13 \
  --tier=db-f1-micro \
  --region=us-west2 \
  --root-password="BudgetApp02092025"

# Create database
gcloud sql databases create budget_management --instance=budget-db

# Create user
gcloud sql users create budget_app \
  --instance=budget-db \
  --password="BudgerApp02092025"

